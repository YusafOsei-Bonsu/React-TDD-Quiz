{"version":3,"sources":["components/answers.js","components/questions.js","components/form.js","components/api/index.js","containers/quiz.js","store/index.js","components/start.js","containers/results.js","containers/App.js","serviceWorker.js","index.js"],"names":["connect","state","len","quizData","data","score","user","users","dispatch","handleSubmit","event","iD","history","correctAnswer","props","preventDefault","target","answer","value","type","console","log","length","push","results","correct_answer","answers","concat","incorrect_answers","sort","a","b","Math","random","idParam","useHistory","className","onSubmit","map","key","htmlFor","atob","name","id","Questions","question","ownProps","categories","catDropDown","justStore","userName","dif","difficulty","topic","axios","get","then","response","payload","catch","alert","handleChange","info","splice","onChange","placeholder","error","hasErrors","useParams","intId","parseInt","persistConfig","storage","initialState","persistedReducer","persistReducer","action","Object","assign","store","createStore","applyMiddleware","thunk","persistor","persistStore","Start","onClick","handleClick","App","this","trivia_categories","loading","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6137d4fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/answers.css';\r\n\r\nexport const Answers = (props) => {\r\n    let correctAnswer = props.results.correct_answer;\r\n    let answer = [props.results.correct_answer];\r\n    let answers = answer.concat(props.results.incorrect_answers);\r\n    answers.sort(function (a, b) { return 0.5 - Math.random() });\r\n    let iD = props.idParam;\r\n    let history = useHistory();\r\n    return (\r\n        <div className='answers'>\r\n            <form onSubmit={(event) => {\r\n                props.handleSubmit(event, iD, history, correctAnswer, props)\r\n            }}>\r\n                {answers.map(answer => {\r\n                    return (\r\n                        <div className=\"Container\" key={answer}>\r\n                            <label htmlFor={answer}>{atob(answer)}</label>\r\n                            <input type='radio' name='answer' value={answer} id={answer} key={answer} />\r\n                        </div>\r\n                    )\r\n                })}\r\n                <button id=\"submitBtn\">Submit</button>\r\n                <h1>{props.user} your score is: {props.data}</h1>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport const mapStateToProps = (state) => {\r\n    return { len: state.quizData, data: state.score, user:state.users }\r\n}\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleSubmit: (event, iD, history, correctAnswer, props) => {\r\n            event.preventDefault();\r\n            let userAnswer = event.target.answer;\r\n            (userAnswer.value === correctAnswer) ? dispatch({ type: 'increment' }) : console.log(\"incorrect\");\r\n            if (iD === props.len.length - 1) {\r\n                return history.push('/results')\r\n            } else {\r\n                return history.push(`/quiz/${iD + 1}`);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import React from 'react'\r\nexport const Questions = ({results}) => {\r\n    return (\r\n        <div className='answers'> \r\n          <h5>{atob(results.question)}</h5>\r\n        </div>\r\n        );\r\n}\r\nexport default Questions;","import React from 'react';\r\nimport '../styles/form.css';\r\nimport { connect } from 'react-redux';\r\nimport { getQuizData } from './api';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Form = (props) => {\r\n    let info = props.categories;\r\n    // remove link that never loads\r\n    info.splice(20, 1)\r\n    let data = props.quizData\r\n    let history = useHistory();\r\n    return (\r\n        <div>\r\n            <form className='form' onSubmit={(event) => { props.handleSubmit(event, history, data) }}>\r\n                <select name=\"topic\">\r\n                    {info.map((data) => { return <option className={data.id} key={data.id} value={data.id}>{data.name}</option> })}\r\n                </select>\r\n                <br />\r\n                <label htmlFor=\"easy\"><input id=\"easy\" type=\"radio\" key=\"easy\" name=\"difficulty\" value=\"easy\" />Easy</label>\r\n                <br />\r\n                <label htmlFor=\"medium\"><input id=\"medium\" type=\"radio\" name=\"difficulty\" value=\"medium\" />Medium</label>\r\n                <br />\r\n                <label htmlFor=\"hard\"><input id=\"hard\" type=\"radio\" name=\"difficulty\" value=\"hard\" />Hard</label>\r\n                <br />\r\n                <input id=\"textInput\" onChange={props.handleChange} type='text' placeholder='player1' /><br />\r\n                <input type=\"submit\" value=\"Go\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport const mapStateToProps = (state, ownProps) => {\r\n    return { categories: state.catDropDown, justStore: ownProps, userName: state.users, quizData: state.quizData }\r\n};\r\n//add an on change to add user name to data\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleSubmit: (event, history, data) => {\r\n            event.preventDefault();\r\n            let difficulty = event.target.difficulty.value;\r\n            let topic = event.target.topic.value;\r\n            dispatch({type: 'reset'});\r\n            dispatch(getQuizData(topic, difficulty));\r\n            if (data.length === 0) {\r\n                alert('Server Error. Please try again')\r\n                history.push(`/form/`)\r\n            }\r\n            else {\r\n                history.push('/quiz/0');\r\n            }\r\n        },\r\n        handleChange: (event) => {\r\n            let name = event.target.value;\r\n            dispatch({ type: 'addUser', payload: name });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import axios from 'axios';\r\nexport const getCatData = (dispatch) => {\r\n    return (dispatch) => {\r\n        axios.get(\"https://opentdb.com/api_category.php\").then(response => {\r\n            const data = response.data;\r\n            dispatch({ type: 'catDropDown', payload: data.trivia_categories });\r\n        })\r\n\r\n    }\r\n};\r\n// Fetch for quiz by category id, level and \r\nexport const getQuizData = (value, dif, dispatch) => {\r\n    return (dispatch) => {\r\n        axios.get(`https://opentdb.com/api.php?amount=10&category=${value}&difficulty=${dif}&type=multiple&encode=base64`).then(response => {\r\n            const data = response.data.results;\r\n            dispatch({ type: 'questionsAnswers', payload: data });\r\n        }).catch(() => dispatch({ type: 'handle-error' }))\r\n    }\r\n};","import React from 'react';\r\nimport Answers from '../components/answers';\r\nimport Questions from '../components/questions';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport Form from '../components/form';\r\n\r\n export const Quiz = (props) => {\r\n    let id = useParams();\r\n    let intId = parseInt(id.id);\r\n    return (\r\n        props.results.length === 0 ? <Form /> :\r\n        <div className='questionAndAnswer'>\r\n            <Questions results={props.results[id.id]} />\r\n            <Answers results={props.results[id.id]} idParam={intId} />\r\n        </div>   \r\n    );\r\n}\r\nexport const mapStateToProps = (state) => {\r\n    return ({ results: state.quizData, error: state.hasErrors })\r\n};\r\nexport default connect(mapStateToProps)(Quiz);","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n// Setting up storage to make sure the store persist after refresh\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n};\r\n// Initialise store\r\nexport const initialState = {\r\n    hasErrors: false,\r\n    users: 'User',\r\n    catDropDown: [],\r\n    quizData: [],\r\n    score: 0\r\n}\r\n// Initialize reducer. The reducer is the only way to communicate with state.\r\n// It takes an action creates new state object, then updates the new state object. \r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'handle-error':\r\n            return Object.assign({}, state, {hasErrors:true})\r\n        case 'catDropDown':\r\n            // console.log( action.payload)\r\n            return Object.assign({}, state, { catDropDown: action.payload })\r\n        case 'questionsAnswers':\r\n            // console.log( action.payload)\r\n            return Object.assign({}, state, { quizData: action.payload })\r\n        case 'addUser':\r\n            return Object.assign({}, state, { users: action.payload })\r\n        case 'increment':\r\n            return Object.assign({}, state, {score: state.score + 1})\r\n        case 'reset':\r\n            return Object.assign({}, state, {score: state.score = 0, quizData: []})\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\n// Create and export store\r\nexport const store = createStore(persistedReducer, applyMiddleware(thunk));\r\n// Export persistent store\r\nexport let persistor = persistStore(store);","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport '../styles/start.css';\r\n\r\nconst Start = () => {\r\n    let history = useHistory();\r\n\r\n    // Navigates to the form page\r\n    function goToForm() {\r\n        history.push('/form');\r\n    }\r\n\r\n    return (\r\n        <div className='start'>\r\n           <button className=\"glow-on-hover\" onClick={goToForm}>Start Quiz</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport '../styles/results.css';\r\n\r\nexport const Results = (props) => {\r\n    let history = useHistory();\r\n    return (\r\n        <div className='results'>\r\n            <h1>Results</h1>\r\n            <h3>{props.user}, you scored {props.data} out of {props.len}</h3>\r\n            <button className=\"glow-on-hover\" onClick={() => { props.handleClick(history); history.push('/'); }}>Restart Quiz</button>\r\n        </div>\r\n    );\r\n}\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleClick: () => {\r\n            dispatch({ type: 'reset' });\r\n            dispatch({ type: 'addUser', payload: \"User\" })   \r\n        }\r\n    }\r\n}\r\nexport const mapStateToProps = (state, ownProps) => {\r\n    return { len: state.quizData.length, data: state.score, user: state.users }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","import React, { Component } from 'react';\r\nimport { getCatData } from '../components/api';\r\nimport { connect } from 'react-redux';\r\nimport Quiz from './quiz';\r\nimport { persistor } from '../store';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Start from '../components/start';\r\nimport Form from '../components/form';\r\nimport Results from './results';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nexport class App extends Component {\r\n  componentDidMount() {\r\n    this.props.dispatch(getCatData());\r\n  }\r\n  render() {\r\n    return (\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path='/'>\r\n              <Start />\r\n            </Route>\r\n            <Route exact path='/form'>\r\n              <Form />\r\n            </Route>\r\n            <Route path='/quiz/:id'>\r\n              <Quiz />\r\n            </Route>\r\n            <Route path='/results'>\r\n              <Results />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </PersistGate>\r\n    )\r\n  }\r\n}\r\nexport default connect()(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}